GRUB_INIT_TUNE="1000 334 1 334 1 0 1 334 1 0 1 261 1 334 1 0 1 392 2 0 4 196 2"
insmod png
#insmod gfxterm
#insmod lspci
insmod vbe
#insmod chain
#insmod font
set default=1
set timeout=30
set fallback=0
set rootuuid=###ROOTUUID###
export rootuuid
search --no-floppy --fs-uuid --set=root $rootuuid
set root=${root}
if loadfont /boot/grub/fonts/unicode.pf2 ; then
#	set gfxmode=640x480
	if terminal_output gfxterm ; then true ; else
		terminal gfxterm
	fi
fi
if background_image -m stretch /boot/splash/splash-hq.png ; then
	set color_normal=black/black
	set color_highlight=white/green
else
	set menu_color_normal=white/black #2
	set menu_color_highlight=green/white #2
	set color_normal=white/magenta #2
	set color_highlight=green/white #2
fi




function loopcfgboot {
	iso_path="$1"
	loopback loop $iso_path
	root=(loop)
	export root
	export iso_path
	configfile /boot/grub/loopback.cfg
	#if [ -e /boot/grub/grub.cfg ]; then
	#	configfile /boot/grub/grub.cfg
	#fi
}
function loopboot {
	loopback loop "$1"
	echo "Loading kernel... $2"
	echo "Bootoptions: $4"
	linux (loop)$2 noeject eject=no loop=$1 isoloop=$1 live-media-path=$1 iso-scan/filename=$1 iso_filename=$1 findiso=$1 bootfrom=/dev/sda$1 from=$1 $4
	echo "Loading initrd... $3"
	initrd (loop)$3
}

#Any file booted with these mapboot functions must be defragged on the drive, else grub.exe will refuse to boot it. sudo e4defrag $file
#If there is a fourth partition on the disk, this function will shutdown the computer.
#If the file is fragmented, this function will drop to a shell.
function mapboot {
	echo "This function will only work if partition 4 on the root device is free and the file to boot is not fragmented on the disk."
	echo "If the file is fragmented, you will be dropped to a shell. Only possible recovery option is to defrag the file."
	echo "If the fourth partition is in use, the computer will shutdown."
	sleep -v 10
	bootoptions="parttype (hd0,3) | set check=;set check=%check:~-5,4%; if not %check%==0x00 halt; partnew (hd0,3) 0 0 0;map $1 (0xff);map --hook;partnew (hd0,3) 0 $1;root (0xff);chainloader (0xff);boot"
	linux /boot/grub4dos/grub.exe --config-file=$bootoptions
}

#Load the entire file to ram before attempting to boot. Will take a long time with full size ISOs. Will fail with a filename with spaces.
function simplemapboot {
	iso_path="$1"
	bootoptions="root (hd0,0)$iso_path;map --mem (hd0,0)$iso_path (0xff);map --hook;root (0xff);chainloader (0xff);boot"
	linux /boot/grub4dos/grub.exe --config-file=$bootoptions
}

#This is functionally equivalent to simplemapboot, but uses memdisk instead of grub4dos.
#Load the entire file into ram before attempting to boot it. Will take a long time with full-size ISOs.
#Floppy images are expected to have .ima extension
#Hard drive images are expected to have .img extension
function memdiskboot {
	regexp --set=ext '.*?\.(.*)' "$1"
	echo "Found extension $ext..."
	if [ "$ext" == "iso" ]; then
		ext="iso raw"
	elif [ "$ext" == "ima" ]; then
		ext="floppy"
	elif [ "$ext" == "img" ]; then
		ext="harddisk"
	fi
	echo "Preparing to boot [$1] as [$ext]..."
	linux16 /boot/memdisk $ext
	echo "Loading $1 into RAM, this may take some time..."
	initrd16 "$1"
}



if cpuid -l; then
	configfile /boot/grub/grub-amd64.cfg
else
	configfile /boot/grub/grub-i386.cfg
fi

